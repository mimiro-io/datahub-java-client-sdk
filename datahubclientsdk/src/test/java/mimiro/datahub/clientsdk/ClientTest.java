/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mimiro.datahub.clientsdk;

import org.junit.Test;

import javax.xml.crypto.Data;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

import static org.junit.Assert.*;

public class ClientTest {

    @Test
    public void testCreateClient() {
        DatahubClient client = new DatahubClient();
        assertNotNull("client should not be null", client);
    }

    @Test
    public void testParseNoEntities(){
        InputStream stream = getClass().getClassLoader().getResourceAsStream("testing/testParseNoEntities.json");

        EntityStreamParser parser = new EntityStreamParser();
        EntityCollection entityCollection = parser.parseData(stream);
        assertNotNull("entitycollection must not be null", entityCollection);

        // check context
        assertNotNull("context must not be null", entityCollection.getContext());
        assertEquals("mimiro namespace is missing", "http://data.mimiro.io/core/", entityCollection.getContext().getExpansionForPrefix("mimiro"));

        // check continuation
        assertNotNull("continuation token must not be null", entityCollection.getContinuationToken());
        assertEquals("continuation token does not match expected value", "next-20", entityCollection.getContinuationToken());
    }

    @Test
    public void testParseEntities(){
        InputStream stream = getClass().getClassLoader().getResourceAsStream("testing/testParseEntities.json");

        EntityStreamParser parser = new EntityStreamParser();
        EntityCollection entityCollection = parser.parseData(stream);
        assertNotNull("entitycollection must not be null", entityCollection);

        // check context
        assertNotNull("context must not be null", entityCollection.getContext());
        assertEquals("mimiro namespace is missing", "http://data.mimiro.io/core/", entityCollection.getContext().getExpansionForPrefix("mimiro"));

        // check continuation
        assertNotNull("continuation token must not be null", entityCollection.getContinuationToken());
        assertEquals("continuation token does not match expected value", "next-20", entityCollection.getContinuationToken());

        // check entities
        assertEquals("one entity expected", 1, entityCollection.getEntities().size());

        var entity = entityCollection.getEntities().stream().findFirst().get();

        assertEquals("three properties expected", 3, entity.getProperties().size());
        assertEquals("two references expected", 2, entity.getReferences().size());
    }

    // Uncomment the test and add real values to the params for the datahubclient to test
    // @Test
    public void testClient() {
        var apiEndpoint = "API_ENDPOINT";
        var authEndpoint = "AUTH_ENDPOINT";
        var clientId = "CLIENT_ID";
        var clientSecret = "CLIENT_SECRET";
        var audience = "AUDIENCE";
        var grantType = "GRANT_TYPE";

        var client = new DatahubClient(apiEndpoint,
                                        authEndpoint,
                                        clientId,
                                        clientSecret,
                                        audience,
                                        grantType);

        try {
            var datasetName = "DATASET_NAME";
            var entities = client.getEntities(datasetName, null);
            var token = entities.getContinuationToken();
            assertNotNull("token should not be null", token);
        } catch (ClientException e) {
            assertTrue("unexpected exception", true);
        }

        try {
            var datasets = client.getDatasets();
            assertNotNull("token should not be null", datasets);
        } catch (ClientException e) {
            assertTrue("unexpected exception", true);
        }
    }
}
